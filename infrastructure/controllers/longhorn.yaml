---
apiVersion: source.toolkit.fluxcd.io/v1
kind: HelmRepository
metadata:
  name: longhorn
  namespace: kube-system
spec:
  interval: 24h
  url: https://charts.longhorn.io
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: longhorn
  namespace: kube-system
spec:
  chart:
    spec:
      chart: longhorn
      interval: 12h
      sourceRef:
        kind: HelmRepository
        name: longhorn
      version: "*"
  interval: 30m
  values:
    defaultSettings:
      allowCollectingLonghornUsageMetrics: false
      autoCleanupSnapshotWhenDeleteBackup: true
      backupCompressionMethod: gzip
      concurrentAutomaticEngineUpgradePerNodeLimit: 1
      defaultDataLocality: best-effort
      nodeDownPodDeletionPolicy: delete-both-statefulset-and-deployment-pod
      orphanAutoDeletion: true
      removeSnapshotsDuringFilesystemTrim: true
      replicaAutoBalance: least-effort
      rwxVolumeFastFailover: true
    persistence:
      defaultClass: true
      defaultDataLocality: best-effort
      nfsOptions: async,hard,nfsvers=4,noatime,proto=tcp,retrans=2,rsize=65536,timeo=600,wsize=65536
      reclaimPolicy: Delete
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  annotations:
    command: &cmd OS=$(grep -E "^ID_LIKE=" /etc/os-release | cut -d '=' -f 2); if [[ -z "${OS}" ]]; then OS=$(grep -E "^ID=" /etc/os-release | cut -d '=' -f 2); fi; if [[ "${OS}" == *"debian"* ]]; then sudo apt-get update -q -y && sudo apt-get install -q -y nfs-common && sudo modprobe nfs; elif [[ "${OS}" == *"suse"* ]]; then sudo zypper --gpg-auto-import-keys -q refresh && sudo zypper --gpg-auto-import-keys -q install -y nfs-client && sudo modprobe nfs; else sudo yum makecache -q -y && sudo yum --setopt=tsflags=noscripts install -q -y nfs-utils && sudo modprobe nfs; fi && if [ $? -eq 0 ]; then echo "nfs install successfully"; else echo "nfs install failed error code $?"; fi
  labels:
    app: longhorn-nfs-installation
  name: longhorn-nfs-installation
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: longhorn-nfs-installation
  template:
    metadata:
      labels:
        app: longhorn-nfs-installation
    spec:
      hostNetwork: true
      hostPID: true
      initContainers:
      - name: nfs-installation
        command:
          - nsenter
          - --mount=/proc/1/ns/mnt
          - --
          - bash
          - -c
          - *cmd
        image: alpine:latest
        securityContext:
          privileged: true
      containers:
      - name: sleep
        image: registry.k8s.io/pause:latest
  updateStrategy:
    type: RollingUpdate
